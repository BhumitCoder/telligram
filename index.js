const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// Load Telegram bot token
const token = "7346817601:AAH8boOYeT521yf4Ge3TXV_yuAwhWc3eVag";
if (!token) {
  console.error('Error: TELEGRAM_BOT_TOKEN is not set in .env file');
  process.exit(1);
}

// Initialize Telegram bot
const bot = new TelegramBot(token, { polling: false }); // Disable polling
console.log('Bot @ChatGlowBot initializing...');

// Pollinations API base URLs
const TEXT_API = 'https://text.pollinations.ai/';
const IMAGE_API = 'https://image.pollinations.ai/prompt/';

// Set webhook on Vercel deployment
const setWebhook = async () => {
  const vercelUrl =  'https://telligram.vercel.app/'; // Replace with your Vercel URL
  const webhookUrl = `${vercelUrl}/api/bot`; // Webhook endpoint
  try {
    await bot.setWebHook(webhookUrl);
    console.log(`Webhook set to: ${webhookUrl}`);
  } catch (error) {
    console.error('Failed to set webhook:', error.message);
  }
};

// Handle Telegram updates via webhook
const handleUpdate = async (req, res) => {
  if (req.method === 'POST') {
    const body = req.body;
    if (body && body.message) {
      const chatId = body.message.chat.id;
      const text = body.message.text ? body.message.text.trim().toLowerCase() : '';

      try {
        if (text && text.includes('create an image') || text.includes('generate a picture') || 
            text.includes('draw') || text.includes('paint') || text.includes('sketch') ||
            text.includes('make an image') || text.includes('make a picture') || 
            text.includes('produce an image') || text.includes('illustrate') ||
            text.includes('design a picture') || text.includes('render an image') ||
            text.includes('create image') || text.includes('generate image') ||
            text.includes('create picture') || text.includes('generate picture')) {
          await bot.sendMessage(chatId, 'Generating your image...');
          const userPrompt = text.replace(/(create an image|generate a picture|draw|paint|sketch|make an image|make a picture|produce an image|illustrate|design a picture|render an image|create image|generate image|create picture|generate picture)/gi, '').trim();
          const prompt = encodeURIComponent(userPrompt);
          const url = `${IMAGE_API}${prompt}?width=512&height=512&model=flux&nologo=true`;
          await bot.sendPhoto(chatId, url, { caption: `Image generated by BAI, for: ${text}` });
        } else {
          await bot.sendMessage(chatId, 'Processing your request...');
          const response = await axios.post(TEXT_API, {
            model: 'openai',
            messages: [
              { role: 'system', content: 'You are BAI, an AI assistant trained by Bhumit Panchani. Respond professionally and avoid identifying as any other entity.' },
              { role: 'user', content: text }
            ],
            max_tokens: 300
          }, { timeout: 10000 });
          const textResponse = response.data || 'Sorry, I could not generate a response.';
          await bot.sendMessage(chatId, `${textResponse}`);
        }
      } catch (error) {
        console.error('Processing error:', error.message);
        await bot.sendMessage(chatId, `Error: An issue occurred. Please try again. (${error.message})`);
      }
    }
    res.status(200).send('OK');
  } else {
    res.status(405).send('Method Not Allowed');
  }
};

// Export the handler for Vercel
module.exports = (req, res) => {
  setWebhook().catch(console.error); // Set webhook on first load
  handleUpdate(req, res);
};

// Handle image input (analysis) via webhook
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const photo = msg.photo[msg.photo.length - 1];
  const caption = msg.caption ? msg.caption.trim() : 'Describe this image';

  try {
    const file = await bot.getFile(photo.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${token}/${file.file_path}`;

    await bot.sendMessage(chatId, 'Analyzing your image...');
    const response = await axios.post('https://text.pollinations.ai/', {
      model: 'openai',
      messages: [
        { role: 'system', content: 'You are BAI, an AI assistant trained by Bhumit Panchani. Respond professionally and avoid identifying as any other entity.' },
        {
          role: 'user',
          content: [
            { type: 'text', text: caption },
            { type: 'image_url', image_url: { url: fileUrl } }
          ]
        }
      ],
      max_tokens: 300
    }, { timeout: 15000 });
    const text = response.data || 'Sorry, I could not analyze the image.';
    await bot.sendMessage(chatId, `${text}`);
  } catch (error) {
    console.error('Image analysis error:', error.message);
    await bot.sendMessage(chatId, `Error: Failed to analyze the image. Please try again. (${error.message})`);
  }
});
