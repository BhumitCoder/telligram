const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

// Load Telegram bot token
const token = "7346817601:AAH8boOYeT521yf4Ge3TXV_yuAwhWc3eVag";
if (!token) {
  console.error('Error: TELEGRAM_BOT_TOKEN is not set in .env file');
  process.exit(1);
}

// Initialize Telegram bot with polling
const bot = new TelegramBot(token, {
  polling: {
    interval: 1000,
    autoStart: true,
    params: { timeout: 10 }
  }
});
console.log('Bot @ChatGlowBot is starting...');

// Pollinations API base URLs
const TEXT_API = 'https://text.pollinations.ai/';
const IMAGE_API = 'https://image.pollinations.ai/prompt/';

// Test bot connection on startup
bot.getMe()
  .then((botInfo) => {
    console.log(`Bot connected successfully: @${botInfo.username}`);
  })
  .catch((error) => {
    console.error('Failed to connect to Telegram API:', error.message);
    process.exit(1);
  });

// /start command
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `Greetings, ${msg.from.first_name}! I am BAI, an AI-powered assistant trained by Bhumit Panchani. You may:\n\n` +
    `- Submit a question or statement (e.g., "What is AI?" or "Provide a summary of space") for text responses.\n` +
    `- Request an image with phrases such as "create an image," "draw," or "paint" (e.g., "Draw a cat" or "Create an image of a sunset").\n` +
    `- Send an image with a caption (e.g., "Describe this") for image analysis.\n\n` +
    `Type /help for additional guidance.`);
});

// /help command
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, `Instructions for Using @ChatGlowBot:\n\n` +
    `- **Text Generation**: Submit a question or statement (e.g., "What is the capital of France?" or "Compose a poem").\n` +
    `- **Image Generation**: Request an image using phrases like "create an image," "draw," "paint," "sketch," "make a picture," etc. (e.g., "Draw a forest" or "Paint a landscape").\n` +
    `- **Image Analysis**: Send an image with a caption (e.g., send an image with caption "What is in this picture?").\n\n` +
    `BAI will process your input accordingly. Please feel free to explore its capabilities.`);
});

// Handle all messages
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text ? msg.text.trim().toLowerCase() : '';

  // Initialize userImages per request to avoid state issues
  const userImages = {};

  // Handle text input (text generation or image generation)
  if (text && !msg.photo) {
    if (text.includes('create an image') || text.includes('generate a picture') || 
        text.includes('draw') || text.includes('paint') || text.includes('sketch') ||
        text.includes('make an image') || text.includes('make a picture') || 
        text.includes('produce an image') || text.includes('illustrate') ||
        text.includes('design a picture') || text.includes('render an image') ||
        text.includes('create image') || text.includes('generate image') ||
        text.includes('create picture') || text.includes('generate picture')) {
      bot.sendMessage(chatId, 'Generating your image...');
      try {
        const userPrompt = text.replace(/(create an image|generate a picture|draw|paint|sketch|make an image|make a picture|produce an image|illustrate|design a picture|render an image|create image|generate image|create picture|generate picture)/gi, '').trim();
        const prompt = encodeURIComponent(userPrompt);
        const url = `${IMAGE_API}${prompt}?width=512&height=512&model=flux&nologo=true`;
        const response = await axios.get(url, { timeout: 10000 });
        await bot.sendPhoto(chatId, url, { caption: `Image generated by BAI, for: ${text}` });
      } catch (error) {
        console.error('Image generation error:', error.message);
        bot.sendMessage(chatId, `Error: Failed to generate image. Please try again or simplify your description. (${error.message})`);
      }
    } else {
      bot.sendMessage(chatId, 'Processing your request...');
      try {
        const prompt = encodeURIComponent(text);
        const response = await axios.post(TEXT_API, {
          model: 'openai',
          messages: [
            { role: 'system', content: 'You are BAI, an AI assistant trained by Bhumit Panchani. Respond professionally and avoid identifying as any other entity.' },
            { role: 'user', content: prompt }
          ],
          max_tokens: 300
        }, { timeout: 10000 });
        const textResponse = response.data || 'Sorry, I could not generate a response.';
        bot.sendMessage(chatId, `${textResponse}`);
      } catch (error) {
        console.error('Text generation error:', error.message);
        bot.sendMessage(chatId, `Error: Failed to generate text. Please try again or rephrase your request. (${error.message})`);
      }
    }
  }

  // Handle image input (analysis)
  if (msg.photo) {
    const photo = msg.photo[msg.photo.length - 1]; // Get highest resolution
    const caption = msg.caption ? msg.caption.trim() : 'Describe this image';

    try {
      const file = await bot.getFile(photo.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${token}/${file.file_path}`;

      bot.sendMessage(chatId, 'Analyzing your image...');
      try {
        const response = await axios.post('https://text.pollinations.ai/', {
          model: 'openai',
          messages: [
            { role: 'system', content: 'You are BAI, an AI assistant trained by Bhumit Panchani. Respond professionally and avoid identifying as any other entity.' },
            {
              role: 'user',
              content: [
                { type: 'text', text: caption },
                { type: 'image_url', image_url: { url: fileUrl } }
              ]
            }
          ],
          max_tokens: 300
        }, { timeout: 15000 });
        const text = response.data || 'Sorry, I could not analyze the image.';
        bot.sendMessage(chatId, ` ${text}`);
      } catch (error) {
        console.error('Image analysis error:', error.message);
        bot.sendMessage(chatId, `Error: Failed to analyze the image. Please try again. (${error.message})`);
      }
    } catch (error) {
      console.error('Image processing error:', error.message);
      bot.sendMessage(chatId, `Error: Failed to process your image. Please try sending it again. (${error.message})`);
    }
  }
});

// Enhanced polling error handling
bot.on('polling_error', (error) => {
  console.error(`Polling error: ${error.code} - ${error.message}`);
  if (error.code === 'ETELEGRAM' && error.response && error.response.statusCode === 404) {
    console.error('Possible invalid token or Telegram API unreachable. Verify token and network.');
  }
});
